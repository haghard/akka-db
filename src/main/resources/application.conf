akka {

  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = DEBUG
  logger-startup-timeout = 30s
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  log-dead-letters = 0
  log-dead-letters-during-shutdown = false

  actor {
    #allow-java-serialization = off

    serializers {
      ser = "db.serializers.PBSerializer"
    }

    serialization-bindings {
      "com.rbmhtechnology.eventuate.VectorTime" = ser
      "com.rbmhtechnology.eventuate.crdt.MVRegister" = ser
    }

  }

  remote {
    artery {
      advanced {

        maximum-frame-size = 80MiB

        #The default size of the system messages buffer is 20000
        #system-message-buffer-size = 20000

        # queue for outgoing control (system) messages 
        #outbound-control-queue-size = 3072
      }
    }
  }

  cluster {
    downing-provider-class = "db.cluster.SplitBrainResolver"
    auto-down-unreachable-after = 3 s

    #downing-provider-class = "tanukki.akka.cluster.autodown.MajorityLeaderAutoDowning"
    #custom-downing {
    #  stable-after = 3 s # in prod should be at least 5 s
    #  majority-leader-auto-downing {
    #    majority-member-role = ""
    #    down-if-in-minority = true
    #    shutdown-actor-system-on-resolution = true
    #  }
    #}

    # How many members are needed to start a cluster.
    #min-nr-of-members = 2

    #log-info = off
    failure-detector {
      implementation-class = "akka.remote.PhiAccrualFailureDetector"
      threshold = 8
      heartbeat-interval = 1 s
      acceptable-heartbeat-pause = 3 s
    }

    use-dispatcher = akka.cluster-dispatcher

    metrics.enabled = off
  }

  cluster-dispatcher {
    type = "Dispatcher"
    executor = "fork-join-executor"
    fork-join-executor {
      parallelism-min = 1
      parallelism-max = 2
    }
  }

  db-io {
    type = "Dispatcher"
    executor = "fork-join-executor"
    fork-join-executor {
      parallelism-min = 2
      parallelism-max = 4
    }
  }

  actor.warn-about-java-serializer-usage = false
}