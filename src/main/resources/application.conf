akka {

  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = DEBUG
  logger-startup-timeout = 30s
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  log-dead-letters = 0
  log-dead-letters-during-shutdown = false

  actor {
    #allow-java-serialization = off

    serializers {
      ser = "db.serializers.PBSerializer"
    }

    serialization-bindings {
      "com.rbmhtechnology.eventuate.VectorTime" = ser
      "com.rbmhtechnology.eventuate.crdt.MVRegister" = ser
    }

  }

  remote {
    artery {
      advanced {

        maximum-frame-size = 80MiB

        #The default size of the system messages buffer is 20000
        #system-message-buffer-size = 20000

        # queue for outgoing control (system) messages 
        #outbound-control-queue-size = 3072
      }
    }
  }

  cluster {
    #https://github.com/TanUkkii007/akka-cluster-custom-downing#akka-cluster-custom-downing

    # MajorityLeaderAutoDowning is similar to QuorumLeaderAutoDowning. However, instead of a static specified quorum size
    # this strategy automatically keeps the partition with the largest amount of nodes. If the partitions are of equal size,
    # the partition that contains the node with the globally lowest address is kept. The strategy is the same as the keep majority
    # strategy of Split Brain Resolver from Typesafe reactive platform. If a role is set by majority-member-role,
    # the strategy is only enforced to the nodes with the specified role.
    downing-provider-class = "tanukki.akka.cluster.autodown.MajorityLeaderAutoDowning"

    custom-downing {

      # Time margin after which shards or singletons that belonged to a downed/removed
      # partition are created in surviving partition. The purpose of this margin is that
      # in case of a network partition the persistent actors in the non-surviving partitions
      # must be stopped before corresponding persistent actors are started somewhere else.
      # This is useful if you implement downing strategies that handle network partitions,
      # e.g. by keeping the larger side of the partition and shutting down the smaller side.
      # Decision is taken by the strategy when there has been no membership or
      # reachability changes for this duration, i.e. the cluster state is stable.
      stable-after = 2 s # in prod should be at least 5 s

      majority-leader-auto-downing {
        majority-member-role = ""
        down-if-in-minority = true
        shutdown-actor-system-on-resolution = true
      }
    }


    #downing-provider-class = "com.codelfsolutions.cluster.SplitBrainResolver"
    #auto-down-unreachable-after = 1 s

    # How many members are needed to start a cluster.
    #min-nr-of-members = 2

    #log-info = off
    failure-detector {
      implementation-class = "akka.remote.PhiAccrualFailureDetector"
      threshold = 10 # 8
      heartbeat-interval = 1 s
      acceptable-heartbeat-pause = 4 s #3
    }

    use-dispatcher = akka.cluster-dispatcher

    metrics.enabled = off
  }

  cluster-dispatcher {
    type = "Dispatcher"
    executor = "fork-join-executor"
    fork-join-executor {
      parallelism-min = 1
      parallelism-max = 3
    }
  }


  actor.warn-about-java-serializer-usage = false
}